<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/01/21/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%89%AB%E6%8F%8F%E5%99%A8/"/>
    <url>/2025/01/21/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%89%AB%E6%8F%8F%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="子域名扫描器"><a href="#子域名扫描器" class="headerlink" title="子域名扫描器"></a>子域名扫描器</h1><p>在进行网站安全测试、漏洞挖掘、渗透测试等工作时，扫描子域名是非常关键的一步。</p><h2 id="1-设计思路"><a href="#1-设计思路" class="headerlink" title="1. 设计思路"></a>1. 设计思路</h2><p>我们的目标是实现一个高效的异步子域名扫描器。这个扫描器将通过以下几个方面来优化性能：</p><ul><li><strong>异步请求：</strong> 使用 <code>asyncio</code> 和 <code>aiohttp</code> 实现非阻塞的网络请求，避免了同步请求中常见的性能瓶颈。</li><li><strong>并发控制：</strong> 使用信号量限制并发请求数，防止服务器过载，并且能够自适应处理大量子域名的扫描。</li><li><strong>自动重试机制：</strong> 在请求失败时进行自动重试，保证高可用性。</li><li><strong>批处理：</strong> 将请求分成若干个批次来避免内存溢出和加速扫描过程。</li><li><strong>自定义化：</strong> 提供了一些可调参数，如并发请求数、超时设置、重试次数等，能够适应不同的扫描需求。</li></ul><h2 id="2-主要功能"><a href="#2-主要功能" class="headerlink" title="2. 主要功能"></a>2. 主要功能</h2><h3 id="2-1-异步子域名检查"><a href="#2-1-异步子域名检查" class="headerlink" title="2.1 异步子域名检查"></a>2.1 异步子域名检查</h3><p>该功能用于检查单个子域名是否存在并返回其网页的标题。使用 <code>aiohttp</code> 异步库，发送 HTTP 请求并解析页面内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_subdomain</span>(<span class="hljs-params">self, subdomain: <span class="hljs-built_in">str</span>, domain: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">Tuple</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">str</span>]:<br>    full_domain = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;subdomain&#125;</span>.<span class="hljs-subst">&#123;domain&#125;</span>&quot;</span><br>    <span class="hljs-keyword">if</span> full_domain <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.seen_subdomains:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-variable language_">self</span>.seen_subdomains.add(full_domain)<br>    url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;full_domain&#125;</span>&quot;</span><br><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.rate_limiter:<br>        <span class="hljs-keyword">for</span> attempt <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.max_retries):<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.session.get(url) <span class="hljs-keyword">as</span> response:<br>                    <span class="hljs-keyword">if</span> response.status == <span class="hljs-number">200</span>:<br>                        content = <span class="hljs-keyword">await</span> response.text()<br>                        soup = BeautifulSoup(content, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>                        title = soup.title.string <span class="hljs-keyword">if</span> soup.title <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;No Title&quot;</span><br>                        <span class="hljs-keyword">return</span> (full_domain, title)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">if</span> attempt == <span class="hljs-variable language_">self</span>.max_retries - <span class="hljs-number">1</span>:<br>                    <span class="hljs-variable language_">self</span>.logger.debug(<span class="hljs-string">f&quot;检查域名失败 <span class="hljs-subst">&#123;url&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">0.1</span> * (attempt + <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><h3 id="2-2-批量子域名扫描"><a href="#2-2-批量子域名扫描" class="headerlink" title="2.2 批量子域名扫描"></a>2.2 批量子域名扫描</h3><p>将多个子域名分批进行扫描，避免一次性请求过多导致内存和资源占用过高。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_subdomains_chunk</span>(<span class="hljs-params">self, domain: <span class="hljs-built_in">str</span>, subdomains: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Tuple</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">str</span>]]:<br>    tasks = [<span class="hljs-variable language_">self</span>.check_subdomain(subdomain, domain) <span class="hljs-keyword">for</span> subdomain <span class="hljs-keyword">in</span> subdomains]<br>    results = <span class="hljs-keyword">await</span> asyncio.gather(*tasks)<br>    <span class="hljs-keyword">return</span> [r <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> results <span class="hljs-keyword">if</span> r <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>]<br></code></pre></td></tr></table></figure><h3 id="2-3-生成所有可能的子域名"><a href="#2-3-生成所有可能的子域名" class="headerlink" title="2.3 生成所有可能的子域名"></a>2.3 生成所有可能的子域名</h3><p>通过笛卡尔积方法生成所有可能的子域名前缀，支持自定义长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_subdomains</span>(<span class="hljs-params">self, length: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:<br>    <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;&#x27;</span>.join(p) <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> product(<span class="hljs-variable language_">self</span>.chars, repeat=length)]<br></code></pre></td></tr></table></figure><h3 id="2-4-扫描域名的所有子域"><a href="#2-4-扫描域名的所有子域" class="headerlink" title="2.4 扫描域名的所有子域"></a>2.4 扫描域名的所有子域</h3><p>将子域名长度从最小值到最大值进行扫描，每个长度的子域名按批次进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_domain</span>(<span class="hljs-params">self, domain: <span class="hljs-built_in">str</span>, min_length: <span class="hljs-built_in">int</span> = <span class="hljs-number">1</span>, max_length: <span class="hljs-built_in">int</span> = <span class="hljs-number">3</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Tuple</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">str</span>]]:<br>    all_results = []<br>    start_time = time.time()<br><br>    <span class="hljs-keyword">for</span> length <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(min_length, max_length + <span class="hljs-number">1</span>):<br>        subdomains = <span class="hljs-variable language_">self</span>.generate_subdomains(length)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(subdomains), <span class="hljs-variable language_">self</span>.chunk_size):<br>            chunk = subdomains[i:i + <span class="hljs-variable language_">self</span>.chunk_size]<br>            results = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">self</span>.scan_subdomains_chunk(domain, chunk)<br>            all_results.extend(results)<br><br>            progress = (i + <span class="hljs-built_in">len</span>(chunk)) / <span class="hljs-built_in">len</span>(subdomains) * <span class="hljs-number">100</span><br>            elapsed = time.time() - start_time<br>            <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">f&quot;进度: <span class="hljs-subst">&#123;progress:<span class="hljs-number">.1</span>f&#125;</span>% - 已发现: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(all_results)&#125;</span> - 用时: <span class="hljs-subst">&#123;elapsed:<span class="hljs-number">.1</span>f&#125;</span>秒&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> all_results<br></code></pre></td></tr></table></figure><h3 id="2-5-处理输入文件并输出结果"><a href="#2-5-处理输入文件并输出结果" class="headerlink" title="2.5 处理输入文件并输出结果"></a>2.5 处理输入文件并输出结果</h3><p>通过从输入文件读取域名，逐个扫描并将扫描结果写入输出文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_domains_file</span>(<span class="hljs-params">self, input_file: <span class="hljs-built_in">str</span>, output_file: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            domains = [row[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> csv.reader(f) <span class="hljs-keyword">if</span> row]<br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            writer = csv.writer(f)<br>            writer.writerow([<span class="hljs-string">&#x27;Subdomain&#x27;</span>, <span class="hljs-string">&#x27;Title&#x27;</span>, <span class="hljs-string">&#x27;Domain&#x27;</span>])<br><br>            <span class="hljs-keyword">for</span> domain <span class="hljs-keyword">in</span> domains:<br>                results = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">self</span>.scan_domain(domain)<br><br>                <span class="hljs-keyword">for</span> subdomain, title <span class="hljs-keyword">in</span> results:<br>                    writer.writerow([subdomain, title, domain])<br><br>                <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">f&quot;完成扫描 <span class="hljs-subst">&#123;domain&#125;</span>，共发现 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(results)&#125;</span> 个子域名&quot;</span>)<br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">f&quot;处理域名时发生错误: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">raise</span><br></code></pre></td></tr></table></figure><h2 id="3-运行示例"><a href="#3-运行示例" class="headerlink" title="3. 运行示例"></a>3. 运行示例</h2><p>以下是如何运行整个子域名扫描过程的示例代码。你可以在命令行中运行 <code>main()</code> 函数来启动扫描过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    input_file = <span class="hljs-string">&#x27;domains.csv&#x27;</span><br>    output_file = <span class="hljs-string">&#x27;subdomains_output.csv&#x27;</span><br><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> SubdomainScanner(<br>        concurrent_requests=<span class="hljs-number">50</span>,<br>        timeout=<span class="hljs-number">1.0</span>,<br>        max_retries=<span class="hljs-number">2</span>,<br>        chunk_size=<span class="hljs-number">1000</span><br>    ) <span class="hljs-keyword">as</span> scanner:<br>        <span class="hljs-keyword">await</span> scanner.process_domains_file(input_file, output_file)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    asyncio.run(main())<br></code></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>通过结合 <code>asyncio</code> 和 <code>aiohttp</code>，我们实现了一个高效的异步子域名扫描器，能够并发处理大量的子域名请求，并提供自动重试机制、批处理、进度跟踪等功能。这使得大规模的子域名扫描变得更加高效和可靠。</p><p>如果需要处理大量的子域名，本文提供的代码框架将非常适用。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/01/07/git_set_proxy/"/>
    <url>/2025/01/07/git_set_proxy/</url>
    
    <content type="html"><![CDATA[<h2 id="git设置代理"><a href="#git设置代理" class="headerlink" title="git设置代理"></a>git设置代理</h2><p><code>git config --global http.proxy http://127.0.0.1:10808</code><br><code>git config --global https.proxy https://127.0.0.1:10808</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>My New Post</title>
    <link href="/2025/01/07/My-New-Post/"/>
    <url>/2025/01/07/My-New-Post/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/07/hello-world/"/>
    <url>/2025/01/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
